(defvar prelude-loaded true)
(defun head (l)
  ([] l 0)
  )

(defun tail (l)
  (slice l 1)
  )

(defun reverse! (l)
  ((. l reverse))
  l)

(defconst stdin (. python sys stdin))
(defconst stdout (. python sys stdout))
(defconst stderr (. python sys stderr))
(defconst type-list (. python list))
(defconst type-tuple (. python tuple))
(defconst type-set (. python set))
(defconst type-dict (. python dict))

(defun cons (h t)
  (+ (mk-list h) t))

(defmacro cond (&rest cases)
  (defun mk (cs)
    (if (not cs)
        None
        (mk-list (quote if)
                 (head (head cs))
                 (cons (quote begin) (tail (head cs)))
                 (mk (tail cs)))
        )
    )
  (mk cases)
  )

(defmacro .. (&rest parts)
  (mk-list (quote lambda)
           (quote (obj))
           (+ (mk-list (quote .)
                       (quote obj)
                       )
              (list parts)
              )
           )
  )

(defun list? (x)
  (isinstance x type-list))

(defmacro let* (decls &rest body)
  (defun mk-defvars (ds)
    (if ds
        (cons (scope
               (print ds)
               (if (list? (head ds))
                   (mk-list (quote defvar)
                            ([] (head ds) 0)
                            ([] (head ds) 1))
                   (mk-list (quote defvar)
                            ([] (head ds) 0))
                   )
               )
              (mk-defvars (tail ds))
              )
        (mk-list)
        )
    )
  (+ (mk-list (quote scope))
     (+ (mk-defvars decls)
        body)
     )
  )
