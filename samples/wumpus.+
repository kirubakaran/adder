(import random)
(class Wumpus ()
       (define (rand-room self &rest avoid-rooms)
         (define (rnd) ((. self random randint) 1 20))
         (let ((res (rnd)))
           (while (in res avoid-rooms)
                  (:= res (rnd)))
           res))
       (define (__init__ self)
            (:= (. self random) ((. random Random)))
            (:= (. self links) '(()
                                 (2 5 6)
                                 (1 3 8)
                                 (2 4 10)
                                 (3 5 12)
                                 (1 4 14)
                                 (1 7 15)
                                 (6 8 17)
                                 (2 7 9)
                                 (8 10 18)
                                 (3 9 11)
                                 (10 12 19)
                                 (4 11 13)
                                 (12 14 20)
                                 (5 13 15)
                                 (6 14 16)
                                 (15 17 20)
                                 (7 16 18)
                                 (9 17 19)
                                 (11 18 20)
                                 (13 16 19)))
            (let* ((wumpus ((. self rand-room)))
                   (bat-1 ((. self rand-room) wumpus))
                   (bat-2 ((. self rand-room) wumpus bat-1))
                   (pit ((. self rand-room) wumpus)))
              (:= (. self wumpus) wumpus)
              (:= (. self bats) (mk-list bat-1 bat-2))
              (:= (. self pit) pit)
              (:= (. self player) ((. self rand-room) wumpus bat-1 bat-2 pit)))
            )

       (define (move-to self dest override-p)
         (unless (or override-p
                     ((. self adjacent) (. self player) dest))
                 (print "Can't get there from here.")
                 (return true))
         (let ((with-wumpus (== dest (. self wumpus)))
               (with-pit (== dest (. self pit)))
               (with-bat (in dest (. self bats))))
           (when with-wumpus
                 (print "The wumpus is here!"))
           (when with-pit
                 (print "There's a pit here!"))
           (when with-bat
                 (when with-wumpus
                       (print "...but a bat grabbed you first."))
                 (let* ((bat-dest ((. self rand-room) dest))
                        (bat-after ((. self rand-room) dest bat-dest)))
                   (print "Superbat Zap to room" bat-dest)
                   ((. self bats remove) dest)
                   ((. self bats append) bat-after)
                   ((. self move-to) bat-dest true)))
           (when with-wumpus
                 (print "He ATE YOU UP!")
                 (return false))
           (when with-pit
                 (print "You fell a pit!")
                 (return false))
           (:= (. self player) dest)
           true))

       (define (shoot-at self dest)
         (let ((hit (== dest (. self wumpus))))
           (if hit
               (print "You killed the Wumpus!")
               (print "Nope, no Wumpus there."))
           (not hit)))

       (define (adjacent self r1 r2)
         (in r2 ([] (. self links) r1))
         )

       (define (bats-nearby self)
         (or ((. self adjacent) (. self player) ([] (. self bats) 0))
             ((. self adjacent) (. self player) ([] (. self bats) 1))))

       (define (run self)
         (while true
                (when ((. self adjacent) (. self player) (. self wumpus))
                      (print "I smell a Wumpus!"))
                (when ((. self bats-nearby))
                      (print "Bats nearby!"))
                (when ((. self adjacent) (. self player) (. self pit))
                      (print "I feel a draft!"))
                (print (% "You are in room %d.  There are tunnels to rooms %s.\nShoot or move?"
                          (mk-tuple
                           (. self player)
                           ((. python str) ([] (. self links) (. self player)))
                           )))
                (let* ((cmd-line ((. stdin readline)))
                       (cmd-char (if cmd-line
                                     ((. ([] cmd-line 0) lower))))
                       )
                  (unless (in cmd-char "msq")
                          (print "That is not an option.")
                          (continue))
                  (when (== cmd-char "q")
                        (print "OK, quitting.")
                        (break))
                  (print (% "%s which room?"
                            (if (== cmd-char "m") "To" "At")
                            ))
                  (let ((room-line ((. stdin readline))))
                    (let ((room none))
                      (try
                       (:= room ((. python int) room-line))
                       (:ValueError _ (begin
                                        (print "That is not an integer.")
                                        (continue))))
                      (unless
                       (if (== cmd-char "m")
                           ((. self move-to) room false)
                           ((. self shoot-at) room))
                       (break))
                      )
                    )
                  )
                )
         )
       )

(let ((w (Wumpus)))
  (print (. w wumpus) (. w pit) (. w bats) (. w player))
  ((. w run))
  )
