(defmacro define-element (tag attrs self-closing-p)
  ((. attrs append) 'id)
  ((. attrs append) 'class)
  `(defun ,tag (&rest text-and-children &key ,@attrs)
     (yield "<")
     (yield ,(str tag))
     ,@(map (lambda (a) `(when ,a
                               (yield " ")
                               (yield ,(str a))
                               (yield "=\"")
                               (yield ,a)
                               (yield "\"")))
            attrs)
     (yield ">")
     (for (text-or-child text-and-children)
          (if (str? text-or-child)
              (yield text-or-child)
              (yield* text-or-child)))
     (unless ,self-closing-p
             (yield "</")
             (yield ,(str tag))
             (yield ">"))))

(define (write doc)
  (for (s doc)
       ((. stdout write) s))
  ((. stdout write) "\n"))

(defmacro foreach (x seq expr)
  `((lambda () (for (,x ,seq) (yield ,expr)))))

(define-element html (lang dir) false)
(define-element body (background text link vlink alink
                      lang dir title style bgcolor onload onunload
                      onclick ondblclick onmousedown onmouseup
                      onmouseover onmousemove onmouseout
                      onkeypress onkeydown onkeyup
                      ) false)
(define-element p (lang dir title style align
                   onclick ondblclick onmousedown onmouseup
                   onmouseover onmousemove onmouseout
                   onkeypress onkeydown onkeyup) false)

(defvar color "blue")
(write (html :lang "en_US" :id "root" "fred"
             (body :text color
                   (p :style "font-variant: small-caps" "barney")
                   (foreach x '("adder" "pyle" "gomer")
                            (p :style "font-size: 200%" x))
                   )))
