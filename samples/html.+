(defmacro define-element (tag attrs self-closing-p)
  ((. attrs append) 'id)
  ((. attrs append) 'class)
  `(defun ,tag (&rest text-and-children &key ,@attrs)
     (yield "<")
     (yield ,(str tag))
     ,@(map (lambda (a) `(when ,a
                               (yield " ")
                               (yield ,a)))
            attrs)
     (yield ">")
     (if text-and-children
         (for (text-or-child text-and-children)
              (if (str? text-or-child)
                  (yield text-or-child)
                  (yield* text-and-children)))
         ,@(if self-closing-p
               '()
               `((begin
                   (yield "</")
                   (yield ,(str tag))
                   (yield ">")))))))

(define (write doc)
  (for (s doc)
       ((. stdout write) s)))

(define-element html (lang dir) nil)
(define-element body (background text link vlink alink
                      lang title style bgcolor onload onunload
                      onclick ondblclick onmousedown onmouseup
                      onmouseover onmousemove onmouseout
                      onkeypress onkeydown onkeyup
                      ) nil)

(print "about to write")
(write (html :lang "en_US" :id "root"
             (body :text "red" "Hi.")))
