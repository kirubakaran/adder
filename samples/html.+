(define (lookup-attr-group attr-or-group)
  (case attr-or-group
    ('%coreattrs '(id class style title))
    ('%i18n '(lang dir))
    ('%events '(onclick ondblclick onmousedown onmouseup
                onmouseover onmousemove onmouseout
                onkeypress onkeydown onkeyup))
    ('%attrs (+ (lookup-attr-group '%coreattrs)
                (lookup-attr-group '%i18n)
                (lookup-attr-group '%events)))
    (otherwise (mk-list attr-or-group))))

(define (expand-attr-groups attrs)
  (for (attr attrs)
       (for (x (lookup-attr-group attr))
            (yield x))))

(defmacro define-element (tag attrs &optional (self-closing-p false))
  (:= attrs (list (expand-attr-groups attrs)))
  `(defun ,tag (&rest text-and-children &key ,@attrs)
     (yield "<")
     (yield ,(str tag))
     ,@(map (lambda (a) `(when ,a
                               (yield " ")
                               (yield ,(str a))
                               (yield "=\"")
                               (yield ,a)
                               (yield "\"")))
            attrs)
     (yield ">")
     (for (text-or-child text-and-children)
          (if (str? text-or-child)
              (yield text-or-child)
              (yield* text-or-child)))
     (unless ,self-closing-p
             (yield "</")
             (yield ,(str tag))
             (yield ">"))))

(define (write doc)
  (for (s doc)
       ((. stdout write) s))
  ((. stdout write) "\n"))

(defmacro foreach (x seq expr)
  `((lambda () (for (,x ,seq) (yield ,expr)))))

(define-element a (%attrs charset type name href hreflang
                   rel rev accesskey shape coords tabindex
                   onfocus onblur))

(define-element body (%attrs onload onunload
                      background text link vlink alink))
(define-element html (%i18n version))
(define-element p (%attrs align))

(defvar color "blue")
(write (html :lang "en_US" "fred"
             (body :text color
                   (p :style "font-variant: small-caps" "barney")
                   (foreach x '("adder" "pyle" "gomer")
                            (p :style "font-size: 200%" x))
                   )))
